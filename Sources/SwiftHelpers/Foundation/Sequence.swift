//
//  Created by Valeriy Malishevskyi on 14.09.2022.
//

import Foundation

public extension Sequence where Iterator.Element: Hashable {
    /// Returns a new array containing only the unique elements of the sequence, in the order they appear.
    ///
    /// This function removes duplicate elements from the sequence by using a set to track the elements
    /// that have already been seen. It preserves the order of the original sequence.
    ///
    /// - Returns: A new array containing the unique elements of the sequence.
    func unique() -> [Iterator.Element] {
        var seen: Set<Iterator.Element> = []
        return filter { seen.insert($0).inserted }
    }
}

public extension Sequence {
    /// Returns a new array containing only the unique elements of the sequence, in the order they appear,
    /// determined by the provided `taggingHandler`.
    ///
    /// This function removes duplicate elements from the sequence by using a set to track the unique tags
    /// generated by the `taggingHandler`. It preserves the order of the original sequence.
    ///
    /// - Parameter taggingHandler: A closure that takes an element of the sequence as its argument and
    ///   returns a hashable value used to determine the uniqueness of the element.
    /// - Returns: A new array containing the unique elements of the sequence.
    func unique<T: Hashable>(by taggingHandler: (_ element: Self.Iterator.Element) -> T) -> [Self.Iterator.Element] {
        var knownTags = Set<T>()
        
        return self.filter { element -> Bool in
            let tag = taggingHandler(element)
            
            if !knownTags.contains(tag) {
                knownTags.insert(tag)
                return true
            }
            
            return false
        }
    }
}
